package newcab;

import java.io.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import java.lang.*;

class Driverinfo implements Serializable{
    
    int time;
    int fare;
    //int dist;
    
    int index;
    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Thanooja Reddy
 */


public class D extends javax.swing.JFrame {

    /**
     * Creates new form D
     */
    Driverinfo di = new Driverinfo();
    
    Customers user = new Customers();
    
    int curr_driver_index;
    
    Drivers driver = new Drivers();
    
    int drop;
  
    int init_node;
    
    int dist;
    
    public D() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_pickup = new javax.swing.JTextField();
        jTextField_drop = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("PICK UP LOCATION");

        jLabel2.setText("DROPPING LOCATION");

        jButton1.setText("CLOSE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("ENTER");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_pickup, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_drop))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jButton1)
                        .addGap(52, 52, 52)
                        .addComponent(jButton2)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_pickup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
  
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new A().setVisible(true);
        this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        
        
       String init_loc = jTextField_pickup.getText();
        String final_loc = jTextField_drop.getText();  
        
                try {
			
			FileInputStream fi = new FileInputStream(new File("Drivers.txt"));
			ObjectInputStream oi = new ObjectInputStream(fi);
			
			driver = (Drivers) oi.readObject();
			
			oi.close();
			fi.close();
			
		}
		
		catch(Exception e) {
			
			System.out.println(e.getStackTrace());
			
		}
        
                try {
			
			FileInputStream fi = new FileInputStream(new File("Customers.txt"));
			ObjectInputStream oi = new ObjectInputStream(fi);
			
			user = (Customers) oi.readObject();
			
			oi.close();
			fi.close();
			
		}
		
		catch(Exception e) {
			
			System.out.println("exception");
			
		}
        
        System.out.println(user.toString());
        
        City city = new City();
        
        try {
			
			FileInputStream fi = new FileInputStream(new File("City.txt"));
			ObjectInputStream oi = new ObjectInputStream(fi);
			
			city = (City) oi.readObject();
			
			oi.close();
			fi.close();
			
		}
		
		catch(Exception e) {
			
			System.out.println(e.getStackTrace());
			
		}
        
        System.out.println(city.toString());
        
        
      init_node = -1;
        
         drop = -1;
        
        switch(init_loc)
        { 
            case "kothapet":
                  init_node=0;
                  break;
            case "malakpet":
                  init_node=1;
                  break;
            case "nagole":
                  init_node=2;
                  break;
            case "uppal":
                  init_node=3;
                  break;
            case "madhapur":
                  init_node=4;
                  break;
            case "kondapur":
                  init_node=5;
                  break;
            case "begumpet":
                  init_node=6;
                  break;
            case "gachibowli":
                  init_node=7;
                  break;
            case "lbnagar":
                  init_node=8;
                  break;
            
        }
        
       
        
        switch(final_loc)
        {
            case "kothapet":
                  drop=0;
                  break;
            case "malakpet":
                  drop=1;
                  break;
            case "nagole":
                  drop=2;
                  break;
            case "uppal":
                  drop=3;
                  break;
            case "madhapur":
                  drop=4;
                  break;
            case "kondapur":
                  drop=5;
                  break;
            case "begumpet":
                  drop=6;
                  break;
            case "gachibowli":
                  drop=7;
                  break;
            case "lbnagar":
                  drop=8;
                  break;
        }
        
        
        System.out.println(city.n);
       
            
        String curr_user = user.current_user;
        
        if(init_node!=-1 && drop != -1)
        {
            
        	
			System.out.println(curr_user);
			
			//int pickup = in.nextInt();
			
			int[] ascend = new int[city.n];
			
			int[] ascending = new int[city.n];
			
			for(int i = 0; i < city.n; i++) {
				
				ascending[i] = i;
				
			}
			
			int[] unvisited = new int[city.n];
			
			for(int i = 0; i < city.n; i++) {
				
				unvisited[i] = 1;
				
			}
			
			int[] tent_dist = new int[city.n];
			
			for(int i = 0; i < city.n; i++) {
				
				tent_dist[i] = Integer.MAX_VALUE;
				
                        }
			
			System.out.println(init_node);
        
			
			tent_dist[init_node] = 0;
			
			city.dijkstra(unvisited, tent_dist, init_node);
			
			for(int i = 0; i < city.n; i++) {
				
				ascend[i] = tent_dist[i];
				
			}
			
			city.sortIndices(city.n, ascending, ascend);
			
			for(int i = 0; i < city.n; i++) {
				
				System.out.println(tent_dist[i]);
				
			}
			
			for(int i = 0; i < city.n; i++) {
				
				System.out.println(ascending[i]);
				
			}
			
			int curr_user_index = -1;
			
			curr_driver_index = -1;
			
			int curr_location = -1;
			
			for(int i = 0; i < user.userID.size(); i++) {
				
				if(user.userID.get(i).equals(curr_user)) {
					
					curr_user_index = i;
					
				}
				
			}
			
			System.out.println("Current user index = " + curr_user_index);
                        
                        
			 	
			for(int i = 0; i < ascending.length; i++) {
				
				for(int j = 0; j < driver.driverID.size(); j++) {
					
					if(driver.location.get(j) == ascending[i]) {
						
						curr_location = ascending[i];
						
						break;
						
					}
					
				}
				
				if(curr_location != -1) {
					
					break;
					
				}
				
			}
			
			System.out.println("curr_location = " + curr_location);
                        
                        int ride_dist, ride_fare, ride_time;
                        
                        ride_dist = ascend[curr_location] + ascend[drop];
                        
                        
                        ride_time = 2 * ride_dist;
                        
                        ride_fare = 10 * ride_dist;
                        
                       
                     if(user.wallet.get(curr_user_index) >= 300 && user.wallet.get(curr_user_index) >= ride_fare){
                            
                            Timer timer = new Timer();
			
			int curr_rating = -1;
			
			for(int i = 0; i < driver.driverID.size(); i++) {
				
				if(driver.location.get(i) == curr_location && driver.rating.get(i) > curr_rating) {
					
					curr_driver_index = i;
					
				}	
				
			} 
                        
                         di.time = ride_time;
                        
                        di.fare = ride_fare;
                        
                        di.index = curr_driver_index;
                        
                   try {
		
			FileOutputStream f = new FileOutputStream(new File("di.txt"));
			ObjectOutputStream o = new ObjectOutputStream(f);
		
			o.writeObject(di);
		
			o.close();
			f.close();
		
		}
	
		catch(Exception e) {
		
			System.out.println(e.getStackTrace());
		
		}
			
			if(curr_driver_index != -1) {
				
				driver.isAvailable.set(curr_driver_index, 0);
                                
                                //user.isAvailable.set(curr_user_index, 0);
				
				System.out.println(driver.isAvailable.get(curr_driver_index));
			
				System.out.println(driver.location.get(curr_driver_index));
				
				timer.schedule(new TimerTask() {
					
					@Override
					public void run() {
						
						driver.isAvailable.set(curr_driver_index, 1);
						
						driver.location.set(curr_driver_index, drop);
                                                
                                                //user.isAvailable.set(curr_user_index, 1);
						
						System.out.println(driver.isAvailable.get(curr_driver_index));
						
						System.out.println(driver.location.get(curr_driver_index));
						
					}
					
				}, 1000 * ride_time);
                                
                                new E().setVisible(true);
                                this.setVisible(false);
				
			}
			
			else {
				
                        new F().setVisible(true);
                         this.setVisible(false);        				
			}
                            
                    }
                     
                     else{
                         
                         new H().setVisible(true);
                         this.setVisible(false);
                         
                     }
			
			
        }
        else
        {
             JOptionPane.showMessageDialog(null, "Invalid Input(s)");
        }
            
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
     
        
       /*City city = new City();
        
        try {
			
			FileInputStream fi = new FileInputStream(new File("City.txt"));
			ObjectInputStream oi = new ObjectInputStream(fi);
			
			city = (City) oi.readObject();
			
			oi.close();
			fi.close();
			
		}
		
		catch(Exception e) {
			
			System.out.println(e.getStackTrace());
			
		}
        
        System.out.println(city.toString());
        
        System.out.println(city.n);
        
        System.out.println(city.n);*/
        
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new D().setVisible(true);
            }
        });
        
        
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField_drop;
    private javax.swing.JTextField jTextField_pickup;
    // End of variables declaration//GEN-END:variables
}
